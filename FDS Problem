Solution for the problem on fullstack problem:
Project Structure:
virtual-classroom/
├── backend/
│   ├── models/
│   │   ├── User.js
│   │   ├── Class.js
│   │   ├── Unit.js
│   │   ├── Session.js
│   │   └── Lecture.js
│   ├── routes/
│   │   ├── auth.js
│   │   ├── classes.js
│   │   ├── units.js
│   │   ├── sessions.js
│   │   └── lectures.js
│   ├── middleware/
│   │   └── auth.js
│   └── server.js
└── frontend/
    ├── src/
    │   ├── components/
    │   │   ├── Auth.js
    │   │   ├── ClassList.js
    │   │   ├── ClassDetail.js
    │   │   └── CommentSection.js
    │   ├── App.js
    │   ├── index.js
    │   └── api.js
    └── public/
Backend Code(Node.js with Express)
1.	backend/server.js - Entry point of the server
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const authRoutes = require('./routes/auth');
const classRoutes = require('./routes/classes');
const unitRoutes = require('./routes/units');
const sessionRoutes = require('./routes/sessions');
const lectureRoutes = require('./routes/lectures');

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(bodyParser.json());

mongoose.connect('mongodb://localhost/virtual-classroom', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/classes', classRoutes);
app.use('/api/units', unitRoutes);
app.use('/api/sessions', sessionRoutes);
app.use('/api/lectures', lectureRoutes);

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

backend/models/User.js - User schema
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    role: { type: String, enum: ['admin', 'instructor', 'student'], default: 'student' },
});

module.exports = mongoose.model('User', userSchema);

backend/models/Class.js - Class schema
const mongoose = require('mongoose');

const classSchema = new mongoose.Schema({
    name: { type: String, required: true },
    description: { type: String },
    instructor: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
});

module.exports = mongoose.model('Class', classSchema);

backend/routes/auth.js - Authentication routes
const express = require('express');
const User = require('../models/User');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

const router = express.Router();

router.post('/register', async (req, res) => {
    const { username, password, role } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ username, password: hashedPassword, role });
    await user.save();
    res.status(201).send('User registered');
});

router.post('/login', async (req, res) => {
    const { username, password } = req.body;
    const user = await User.findOne({ username });
    if (!user || !await bcrypt.compare(password, user.password)) {
        return res.status(400).send('Invalid credentials');
    }
    const token = jwt.sign({ id: user._id, role: user.role }, 'SECRET_KEY');
    res.json({ token });
});

module.exports = router;

backend/routes/classes.js - Class management routes
const express = require('express');
const Class = require('../models/Class');
const authMiddleware = require('../middleware/auth');

const router = express.Router();

router.post('/', authMiddleware, async (req, res) => {
    if (req.user.role !== 'admin') return res.status(403).send('Forbidden');
    const { name, description, instructor } = req.body;
    const newClass = new Class({ name, description, instructor });
    await newClass.save();
    res.status(201).json(newClass);
});

router.get('/', async (req, res) => {
    const classes = await Class.find();
    res.json(classes);
});

router.get('/:id', async (req, res) => {
    const classDetail = await Class.findById(req.params.id).populate('instructor');
    res.json(classDetail);
});

module.exports = router;

backend/middleware/auth.js - Authentication middleware
const jwt = require('jsonwebtoken');

module.exports = (req, res, next) => {
    const token = req.headers['authorization'];
    if (!token) return res.status(401).send('Unauthorized');
    jwt.verify(token, 'SECRET_KEY', (err, user) => {
        if (err) return res.status(403).send('Forbidden');
        req.user = user;
        next();
    });
};

Frontend Code (React)
1.	frontend/src/api.js - API calls
import axios from 'axios';

const API_URL = 'http://localhost:5000/api';

export const register = (user) => axios.post(`${API_URL}/auth/register`, user);
export const login = (credentials) => axios.post(`${API_URL}/auth/login`, credentials);
export const getClasses = () => axios.get(`${API_URL}/classes`);
export const getClassById = (id) => axios.get(`${API_URL}/classes/${id}`);

frontend/src/components/Auth.js - Authentication component
import React, { useState } from 'react';
import { login, register } from '../api';

function Auth() {
  const [form, setForm] = useState({ username: '', password: '' });
  const [isRegistering, setIsRegistering] = useState(false);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const authFn = isRegistering ? register : login;
    authFn(form)
      .then(response => console.log(response.data))
      .catch(err => console.error(err));
  };

  return (
    <div>
      <h1>{isRegistering ? 'Register' : 'Login'}</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          name="username"
          value={form.username}
          onChange={handleChange}
          placeholder="Username"
        />
        <input
          type="password"
          name="password"
          value={form.password}
          onChange={handleChange}
          placeholder="Password"
        />
        <button type="submit">{isRegistering ? 'Register' : 'Login'}</button>
      </form>
      <button onClick={() => setIsRegistering(!isRegistering)}>
        {isRegistering ? 'Switch to Login' : 'Switch to Register'}
      </button>
    </div>
  );
}

export default Auth;

frontend/src/components/ClassList.js - List classes
import React, { useState, useEffect } from 'react';
import { getClasses } from '../api';
import { Link } from 'react-router-dom';

function ClassList() {
  const [classes, setClasses] = useState([]);

  useEffect(() => {
    getClasses().then(response => setClasses(response.data));
  }, []);

  return (
    <div>
      <h1>Classes</h1>
      <ul>
        {classes.map(c => (
          <li key={c._id}>
            <Link to={`/classes/${c._id}`}>{c.name}</Link>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default ClassList;

frontend/src/components/ClassDetail.js - Class details
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getClassById } from '../api';

function ClassDetail() {
  const { id } = useParams();
  const [classDetail, setClassDetail] = useState(null);

  useEffect(() => {
    getClassById(id)
      .then(response => setClassDetail(response.data));
  }, [id]);

  if (!classDetail) return <div>Loading...</div>;

  return (
    <div>
      <h1>{classDetail.name}</h1>
      <p>{classDetail.description}</p>
    </div>
  );
}

export default ClassDetail;

frontend/src/App.js - Main App component
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import ClassList from './components/ClassList';
import ClassDetail from './components/ClassDetail';
import Auth from './components/Auth';

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/login" component={Auth} />
        <Route path="/classes/:id" component={ClassDetail} />
        <Route path="/" component={ClassList} />
      </Switch>
    </Router>
  );
}

export default App;

frontend/src/index.js - Entry point of the React application
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));

Running the Application
1.	Start the Backend Server:
cd backend
node server.js

2.	Start the Frontend Application:

cd frontend
npm start
